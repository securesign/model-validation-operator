# Build the manager binary
FROM registry.redhat.io/ubi9/go-toolset:9.6@sha256:d1c1f2af6122b0ea3456844210d6d9c4d96e78c128bc02fabeadf51239202221 AS builder
ARG TARGETOS
ARG TARGETARCH

WORKDIR /workspace
# Copy the Go Modules manifests
COPY go.mod go.mod
COPY go.sum go.sum
# cache deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
RUN go mod download

# Copy the go source
COPY cmd/main.go cmd/main.go
COPY api/ api/
COPY internal/ internal/

# Build
# the GOARCH has not a default value to allow the binary be built according to the host where the command
# was called. For example, if we call make docker-build in a local env which has the Apple Silicon M1 SO
# the docker BUILDPLATFORM arg will be linux/arm64 when for Apple x86 it will be linux/amd64. Therefore,
# by leaving it empty we can ensure that the container and binary shipped on it will have the same platform.
RUN CGO_ENABLED=0 GOOS=${TARGETOS:-linux} GOARCH=${TARGETARCH} go build -a -o manager cmd/main.go

# Use minimal base image to package the manager binary
FROM registry.access.redhat.com/ubi9/ubi-minimal@sha256:2f06ae0e6d3d9c4f610d32c480338eef474867f435d8d28625f2985e8acde6e8
WORKDIR /
COPY --from=builder /workspace/manager .
USER 65532:65532

LABEL description="The image for the model-validation operator."
LABEL io.k8s.description="The image for the model-validation operator."
LABEL io.k8s.display-name="Model validation operator container image for Red Hat Trusted Artifact Signer."
LABEL io.openshift.tags="model-validation, Red Hat Trusted Artifact Signer."
LABEL summary="Operator for the model-validation operator."
LABEL com.redhat.component="model-validation-operator"
LABEL name="model-validation-operator"

ENTRYPOINT ["/manager"]
